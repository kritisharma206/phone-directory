{"version":3,"sources":["registerServiceWorker.js","Header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Header","props","className","heading","AddSusbscriber","inputChangedHandler","e","target","name","value","setState","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubscribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","subscribers","newSubscriber","length","basename","exact","path","render","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.974ad10f.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = function (props) {\r\n    return (\r\n        <div className=\"header\">\r\n            {props.heading}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport './AddSubscriber.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AddSusbscriber extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n    inputChangedHandler = (e) => {\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state);\r\n    }\r\n    onFormSubmitted = (e) => {\r\n        e.preventDefault();\r\n        this.props.addSubscriberHandler(this.state);\r\n        this.setState({ id: 0, name: '', phone: ' ' });\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    render() {\r\n        const { name, phone } = this.state;\r\n        return (\r\n            <div>\r\n                <Header heading=\"Add Subscriber\" />\r\n                <div className=\"component-body-container\">\r\n                  \r\n                    <Link to=\"/\">\r\n                        <button className=\"custom-btn\">Back</button>\r\n                    </Link>\r\n\r\n                    <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name: </label><br />\r\n                        <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone: </label><br />\r\n                        <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <div className=\"subscriber-info-container\">\r\n                            <span className=\"subscriber-to-add-heading\">Subscriber to be added: </span><br />\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddSusbscriber;","import React, { Component } from 'react';\nimport Header from './Header.js';\n\nimport './ShowSubscribers.css';\nimport { Link } from 'react-router-dom';\n\n\n\nclass ShowSubscribers extends Component {\n    onDeletedClick = (subscriberId) => {\n        this.props.deleteSubscriberHandler(subscriberId); \n      }\n    \n\n\n  render() {\n    \n\n    return (\n      <div>\n        <Header heading=\"Phone Directory\" />\n        <div className=\"component-body-container\">\n          \n        <Link to=\"/add\">\n            <button className=\"custom-btn add-btn\">Add</button>\n          </Link>\n\n          <div className=\"grid-container heading-container\">\n            <span className=\"grid-item name-heading\">Name</span>\n            <span className=\"grid-item phone-heading\">Phone</span>\n          </div>\n\n          {\n           \n            this.props.subscribersList.map(sub => {\n              return <div key={sub.id} className=\"grid-container\">\n                <span className=\"grid-item\">{sub.name}</span>\n                <span className=\"grid-item\">{sub.phone}</span>\n                <span className=\"grid-item action-btn-container\">\n                <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this, sub.id)}>Delete</button>\n                </span>\n              </div>\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default ShowSubscribers;","import React, { Component } from 'react';\r\nimport AddSubscriber from './AddSubscriber';\r\nimport ShowSubscribers from './ShowSubscribers';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nclass PhoneDirectory extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            subscribersList: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Shilpa Bhat\",\r\n                    phone: \"9999999999\"\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"Srishti Gupta\",\r\n                    phone: \"8888888888\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    deleteSubscriberHandler = (subscriberId) => {\r\n        let subscribersList = this.state.subscribersList;\r\n        let subscriberIndex = 0;\r\n        subscribersList.forEach(function (subscriber, index) {\r\n            if (subscriber.id === subscriberId) {\r\n                subscriberIndex = index;\r\n            }\r\n        }, this);\r\n        let newSubscribers = subscribersList;\r\n        newSubscribers.splice(subscriberIndex, 1);\r\n        this.setState({subscribers: newSubscribers});\r\n    }\r\n\r\n\r\n\r\n    addSubscriberHandler = (newSubscriber) => {\r\n        let subscribersList = this.state.subscribersList;\r\n        if (subscribersList.length > 0) {\r\n            newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\r\n        } else {\r\n            newSubscriber.id = 1;\r\n        }\r\n        subscribersList.push(newSubscriber);\r\n        this.setState({ subscribersList: subscribersList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <AddSubscriber addSubscriberHandler={this.addSubscriberHandler} />\r\n            \r\n            <Router basename=\"/phone-directory\">\r\n                <div>\r\n                <Route exact path=\"/\" render={(props) => <ShowSubscribers {...props} subscribersList={this.state.subscribersList} deleteSubscriberHandler={this.deleteSubscriberHandler} />} />\r\n                    <Route exact path=\"/add\" render={({history}, props) => <AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler} />} />\r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\nexport default PhoneDirectory;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nimport './common/common.css';\nimport PhoneDirectory from './PhoneDirectory';\n\n\nReactDOM.render(<PhoneDirectory />, document.getElementById('root'));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n//ReactDOM.render(<AddSusbscriber />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}